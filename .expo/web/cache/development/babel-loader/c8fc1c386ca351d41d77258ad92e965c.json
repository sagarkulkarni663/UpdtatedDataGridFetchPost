{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { TextField, Typography } from \"@mui/material\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar columns = [{\n  field: \"title\",\n  headerName: \"Title\",\n  width: 450\n}, {\n  field: \"url\",\n  headerName: \"Url\",\n  width: 450\n}, {\n  field: \"created_at\",\n  headerName: \"CreatedAt\",\n  width: 450\n}, {\n  field: \"author\",\n  headerName: \"Author\",\n  width: 450\n}];\n\nvar SendingData = function SendingData(_ref) {\n  var post = _ref.post,\n      fetching = _ref.fetching,\n      noMore = _ref.noMore;\n  var navigation = useNavigate();\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      search = _useState2[0],\n      setSearch = _useState2[1];\n\n  return _jsxs(\"div\", {\n    \"data-testid\": \"main\",\n    style: {\n      padding: \"1em\"\n    },\n    children: [_jsx(\"div\", {\n      style: {\n        textAlign: \"end\",\n        paddingBottom: \"0.5em\"\n      },\n      children: _jsx(TextField, {\n        label: \"search\",\n        placeholder: \"example title,author\",\n        value: search,\n        variant: \"outlined\",\n        onChange: function onChange(e) {\n          return setSearch(e.target.value);\n        },\n        \"data-testid\": \"search\"\n      })\n    }), _jsx(InfiniteScroll, {\n      dataLength: post.length,\n      scrollThreshold: 0.9,\n      next: fetching,\n      loader: _jsx(Typography, {\n        variant: \"h5\",\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Loading...\"\n      }),\n      hasMore: noMore,\n      endMessage: _jsxs(Typography, {\n        variant: \"h5\",\n        style: {\n          textAlign: \"center\"\n        },\n        children: [\" \", \"All posts are over\"]\n      }),\n      children: _jsx(DataGrid, {\n        rows: post,\n        columns: columns,\n        autoHeight: true,\n        onRowClick: function onRowClick(item) {\n          return navigation(\"fetching\", {\n            state: item.row\n          });\n        }\n      })\n    })]\n  });\n};\n\nexport default SendingData;","map":{"version":3,"sources":["C:/Users/extwe/Downloads/DataGridFetchingPosts/src/SendingData.tsx"],"names":["React","useState","useNavigate","DataGrid","InfiniteScroll","TextField","Typography","columns","field","headerName","width","SendingData","post","fetching","noMore","navigation","search","setSearch","padding","textAlign","paddingBottom","e","target","value","length","item","state","row"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,QAAT,QAAqC,kBAArC;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,eAAtC;;;AAEA,IAAMC,OAAqB,GAAG,CAC5B;AAAEC,EAAAA,KAAK,EAAE,OAAT;AAAkBC,EAAAA,UAAU,EAAE,OAA9B;AAAuCC,EAAAA,KAAK,EAAE;AAA9C,CAD4B,EAE5B;AAAEF,EAAAA,KAAK,EAAE,KAAT;AAAgBC,EAAAA,UAAU,EAAE,KAA5B;AAAmCC,EAAAA,KAAK,EAAE;AAA1C,CAF4B,EAG5B;AAAEF,EAAAA,KAAK,EAAE,YAAT;AAAuBC,EAAAA,UAAU,EAAE,WAAnC;AAAgDC,EAAAA,KAAK,EAAE;AAAvD,CAH4B,EAI5B;AAAEF,EAAAA,KAAK,EAAE,QAAT;AAAmBC,EAAAA,UAAU,EAAE,QAA/B;AAAyCC,EAAAA,KAAK,EAAE;AAAhD,CAJ4B,CAA9B;;AAOA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAqC;AAAA,MAAlCC,IAAkC,QAAlCA,IAAkC;AAAA,MAA5BC,QAA4B,QAA5BA,QAA4B;AAAA,MAAlBC,MAAkB,QAAlBA,MAAkB;AACvD,MAAMC,UAAU,GAAGb,WAAW,EAA9B;;AACA,kBAA4BD,QAAQ,CAAM,EAAN,CAApC;AAAA;AAAA,MAAOe,MAAP;AAAA,MAAeC,SAAf;;AAEA,SACE;AAAK,mBAAY,MAAjB;AAAwB,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAA/B;AAAA,eACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE,KAAb;AAAoBC,QAAAA,aAAa,EAAE;AAAnC,OAAZ;AAAA,gBACE,KAAC,SAAD;AACE,QAAA,KAAK,EAAC,QADR;AAEE,QAAA,WAAW,EAAC,sBAFd;AAGE,QAAA,KAAK,EAAEJ,MAHT;AAIE,QAAA,OAAO,EAAC,UAJV;AAKE,QAAA,QAAQ,EAAE,kBAACK,CAAD;AAAA,iBAAOJ,SAAS,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAhB;AAAA,SALZ;AAME,uBAAY;AANd;AADF,MADF,EAWE,KAAC,cAAD;AACE,MAAA,UAAU,EAAEX,IAAI,CAACY,MADnB;AAEE,MAAA,eAAe,EAAE,GAFnB;AAGE,MAAA,IAAI,EAAEX,QAHR;AAIE,MAAA,MAAM,EACJ,KAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAyB,QAAA,KAAK,EAAE;AAAEM,UAAAA,SAAS,EAAE;AAAb,SAAhC;AAAA;AAAA,QALJ;AASE,MAAA,OAAO,EAAEL,MATX;AAUE,MAAA,UAAU,EACR,MAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAyB,QAAA,KAAK,EAAE;AAAEK,UAAAA,SAAS,EAAE;AAAb,SAAhC;AAAA,mBACG,GADH;AAAA,QAXJ;AAAA,gBAkBE,KAAC,QAAD;AACE,QAAA,IAAI,EAAEP,IADR;AAEE,QAAA,OAAO,EAAEL,OAFX;AAGE,QAAA,UAAU,EAAE,IAHd;AAIE,QAAA,UAAU,EAAE,oBAACkB,IAAD;AAAA,iBAAUV,UAAU,CAAC,UAAD,EAAa;AAAEW,YAAAA,KAAK,EAAED,IAAI,CAACE;AAAd,WAAb,CAApB;AAAA;AAJd;AAlBF,MAXF;AAAA,IADF;AAuCD,CA3CD;;AA6CA,eAAehB,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { DataGrid, GridColDef } from \"@mui/x-data-grid\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { TextField, Typography } from \"@mui/material\";\n\nconst columns: GridColDef[] = [\n  { field: \"title\", headerName: \"Title\", width: 450 },\n  { field: \"url\", headerName: \"Url\", width: 450 },\n  { field: \"created_at\", headerName: \"CreatedAt\", width: 450 },\n  { field: \"author\", headerName: \"Author\", width: 450 },\n];\n\nconst SendingData = ({ post, fetching, noMore }: any) => {\n  const navigation = useNavigate();\n  const [search, setSearch] = useState<any>(\"\");\n\n  return (\n    <div data-testid=\"main\" style={{ padding: \"1em\" }}>\n      <div style={{ textAlign: \"end\", paddingBottom: \"0.5em\" }}>\n        <TextField\n          label=\"search\"\n          placeholder=\"example title,author\"\n          value={search}\n          variant=\"outlined\"\n          onChange={(e) => setSearch(e.target.value)}\n          data-testid=\"search\"\n        />\n      </div>\n      <InfiniteScroll\n        dataLength={post.length}\n        scrollThreshold={0.9}\n        next={fetching}\n        loader={\n          <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n            Loading...\n          </Typography>\n        }\n        hasMore={noMore}\n        endMessage={\n          <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n            {\" \"}\n            All posts are over\n          </Typography>\n        }\n        // data-testid=\"scroll\"\n      >\n        <DataGrid\n          rows={post}\n          columns={columns}\n          autoHeight={true}\n          onRowClick={(item) => navigation(\"fetching\", { state: item.row })}\n        />\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default SendingData;\n"]},"metadata":{},"sourceType":"module"}